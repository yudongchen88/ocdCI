supp <- ret$support
supp
ret <- ocd_CI(p=100, s=5, z=1000, vartheta=2, signal_shape='inv_sqrt', spatial='identity', beta=2,
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=3.03, alpha=0.05, print_type='both')
ret <- ocd_CI(p=100, s=5, z=1000, vartheta=2, signal_shape='inv_sqrt', spatial='identity', beta=2,
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=3.03, alpha=0.05, print_type='both')
ret <- ocd_CI(p=100, s=5, z=1000, vartheta=2, signal_shape='inv_sqrt', spatial='identity', beta=2,
ocd_thresholds='theoretical', l_choice='zero', d1_choice='other', d1=3.03, alpha=0.05, print_type='both')
2*log(100)
sqrt(2*log(100))
2*sqrt(log(100))
sort(c(3,2,1))
?sort
?outer
# Different types of supports
support <- function(theta, beta){
theta <- sort(theta, decreasing = TRUE)
p = length(theta)
vartheta = vector.norm(theta)
b_min = beta/sqrt(2^(floor(log2(2*p)))*log2(2*p))
s_beta = sum(abs(theta) >= b_min)
s_dyadic = 2^(0: floor(log2(p)))
S_grid = vartheta/sqrt(s_dyadic*log2(2*p))
s_eff = s_dyadic[find.first(colSums(outer(abs(theta), S_grid, '>=')) >= s_dyadic)]
return(c(s_beta, s_eff))
}
# Different types of supports
support <- function(p, s, vartheta, beta, signal_shape){
b_min = beta/sqrt(2^(floor(log2(2*p)))*log2(2*p))
theta = vector_of_change(p, s, vartheta, signal_shape)
s_beta = sum(abs(theta) >= b_min)
s_dyadic = 2^(0: floor(log2(p)))
S_grid = vartheta/sqrt(s_dyadic*log2(2*p))
s_eff = s_dyadic[find.first(colSums(outer(abs(theta), S_grid, '>=')) >= s_dyadic)]
return(c(s_beta, s_eff))
}
temp <- function(v) {return(c(1,2))}
a,b=temp(10)
c(a,b)=temp(10)
a=temp(10)
a
# This R file provides the codes to generate Tables 1, 2, S1 and Figure 2 of the accompanied paper
source('ocd_CI.R')
# This R file provides the codes to generate Tables 1, 2, S1 and Figure 2 of the accompanied paper
source('ocd_CI.R')
# This R file provides the codes to generate Tables 1, 2, S1 and Figure 2 of the accompanied paper
source('ocd_CI.R')
n_iter <- 3
df <- expand.grid(s=c(5, 50), vartheta=c(2,1), signal_shape=c('uniform', 'inv_sqrt', 'harmonic'))
df <- df[with(df, order(signal_shape, s, -vartheta)), ]
df$signal_shape <- as.character(df$signal_shape)
df['supp_aug_includes'] <- df['supp_included'] <- rep(0, nrow(df))
se_df <- data.frame(df)
df
i = 1
supp_included <- supp_aug_includes <- rep(0, niter)
for (iter in 1:niter){
ret <- with(df, ocd_CI(p=100, s=s[i], z=1000, vartheta=vartheta[i], signal_shape=signal_shape[i], spatial='identity', beta=vartheta[i],
ocd_thresholds='MC', l_choice='given', d1_choice='variant1', alpha=0.05, print_type='muted'))
supp <- ret$support
supp_aug <- ret$support_aug
# !!!
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[df$s[i]]==S[2]) , 100, 0)
}
df$supp_included[i] <- mean(supp_included)
df$supp_aug_includes[i] <- mean(supp_aug_includes)
se_df$supp_included[i] <- sd(supp_included)/sqrt(niter)
se_df$supp_aug_includes[i] <- sd(supp_aug_includes)/sqrt(niter)
# Generate Table 2 (support recovery)
niter <- 2000
df <- expand.grid(s=c(5, 50), vartheta=c(2,1), signal_shape=c('uniform', 'inv_sqrt', 'harmonic'))
df <- df[with(df, order(signal_shape, s, -vartheta)), ]
df$signal_shape <- as.character(df$signal_shape)
df['supp_aug_includes'] <- df['supp_included'] <- rep(0, nrow(df))
se_df <- data.frame(df)
i=1
supp_included <- supp_aug_includes <- rep(0, niter)
for (iter in 1:niter){
ret <- with(df, ocd_CI(p=100, s=s[i], z=1000, vartheta=vartheta[i], signal_shape=signal_shape[i], spatial='identity', beta=vartheta[i],
ocd_thresholds='MC', l_choice='given', d1_choice='variant1', alpha=0.05, print_type='muted'))
supp <- ret$support
supp_aug <- ret$support_aug
# !!!
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[df$s[i]]==S[2]) , 100, 0)
}
df$supp_included[i] <- mean(supp_included)
df$supp_aug_includes[i] <- mean(supp_aug_includes)
se_df$supp_included[i] <- sd(supp_included)/sqrt(niter)
se_df$supp_aug_includes[i] <- sd(supp_aug_includes)/sqrt(niter)
niter <- 3
i <- 1
df <- expand.grid(s=c(5, 50), vartheta=c(2,1), signal_shape=c('uniform', 'inv_sqrt', 'harmonic'))
df <- df[with(df, order(signal_shape, s, -vartheta)), ]
df$signal_shape <- as.character(df$signal_shape)
df['supp_aug_includes'] <- df['supp_included'] <- rep(0, nrow(df))
se_df <- data.frame(df)
supp_included <- supp_aug_includes <- rep(0, niter)
for (iter in 1:niter){
ret <- with(df, ocd_CI(p=100, s=s[i], z=1000, vartheta=vartheta[i], signal_shape=signal_shape[i], spatial='identity', beta=vartheta[i],
ocd_thresholds='MC', l_choice='given', d1_choice='variant1', alpha=0.05, print_type='muted'))
supp <- ret$support
supp_aug <- ret$support_aug
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[df$s[i]]==S[2]) , 100, 0)
}
df$supp_included[i] <- mean(supp_included)
df$supp_aug_includes[i] <- mean(supp_aug_includes)
se_df$supp_included[i] <- sd(supp_included)/sqrt(niter)
se_df$supp_aug_includes[i] <- sd(supp_aug_includes)/sqrt(niter)
df
se_df
ret <- with(df, ocd_CI(p=100, s=s[i], z=1000, vartheta=vartheta[i], signal_shape=signal_shape[i], spatial='identity', beta=vartheta[i],
ocd_thresholds='MC', l_choice='given', d1_choice='variant1', alpha=0.05, print_type='muted'))
ret
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
S
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_included[1]
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[df$s[i]]==S[2]) , 100, 0)
supp_aug_includes[1]
df
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[S[2]]==S[2]) , 100, 0)
supp_aug_includes[1]
S
S[2]
supp_aug
iter = 1
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[S[2]]==S[2]) , 100, 0)
supp_aug_includes[1]
niter <- 4
df <- expand.grid(s=c(5, 50), vartheta=c(2,1), signal_shape=c('uniform', 'inv_sqrt', 'harmonic'))
df <- df[with(df, order(signal_shape, s, -vartheta)), ]
df$signal_shape <- as.character(df$signal_shape)
df['supp_aug_includes'] <- df['supp_included'] <- rep(0, nrow(df))
se_df <- data.frame(df)
i=5
supp_included <- supp_aug_includes <- rep(0, niter)
for (iter in 1:niter){
ret <- with(df, ocd_CI(p=100, s=s[i], z=1000, vartheta=vartheta[i], signal_shape=signal_shape[i], spatial='identity', beta=vartheta[i],
ocd_thresholds='MC', l_choice='given', d1_choice='variant1', alpha=0.05, print_type='muted'))
supp <- ret$support
supp_aug <- ret$support_aug
S <- support(p=100, s=df$s[i], vartheta=df$vartheta[i], beta=df$vartheta[i], signal_shape=df$signal_shape[i])
supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 100, 0)
supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[S[2]]==S[2]) , 100, 0)
}
df$supp_included[i] <- mean(supp_included)
df$supp_aug_includes[i] <- mean(supp_aug_includes)
se_df$supp_included[i] <- sd(supp_included)/sqrt(niter)
se_df$supp_aug_includes[i] <- sd(supp_aug_includes)/sqrt(niter)
df
df_se
se_df
niter <- 5
df <- data.frame(s=rep(c(5,50),3), signal_shape=rep(c('uniform', 'inv_sqrt', 'harmonic'), c(2,2,2)))
df$signal_shape <- as.character(df$signal_shape)
df
d1_all <- 0.46 + 0.04*(1:125)
d1_all[62]
d1_all[64]
i = 64
j = 3
temp_supp_included <-temp_supp_aug_includes <- rep(0, niter)
for (iter in 1:niter){
ret <- ocd_CI(p=100, s=df$s[j], z=1000, vartheta=2, signal_shape=df$signal_shape[j], spatial='identity', beta=2,
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=d1_all[i], alpha=0.05, print_type='muted')
supp <- ret$support
supp_aug <- ret$support_aug
S <- support(p=100, s=df$s[j], vartheta=2, beta=2, signal_shape=df$signal_shape[j])
temp_supp_included[iter] <- ifelse((length(supp) == 0) | (max(supp) <= S[1]) , 1, 0)
temp_supp_aug_includes[iter] <- ifelse((length(supp_aug) >= S[2]) & (supp_aug[S[2]]==S[2]) , 1, 0)
}
supp_included[i, j] <- mean(temp_supp_included)
supp_aug_includes[i, j] <- mean(temp_supp_aug_includes)
supp_included
supp_included <- supp_aug_includes <- matrix(0, 125, 6)
supp_included[i, j] <- mean(temp_supp_included)
supp_aug_includes[i, j] <- mean(temp_supp_aug_includes)
supp_included
supp_included[i, j] <- mean(temp_supp_included)
supp_aug_includes[i, j] <- mean(temp_supp_aug_includes)
supp_included
temp_supp_aug_includes
temp_supp_included
i = 64
niter
df <- data.frame(s=rep(c(5,50),3), signal_shape=rep(c('uniform', 'inv_sqrt', 'harmonic'), c(2,2,2)))
df$signal_shape <- as.character(df$signal_shape)
d1_all <- 0.46 + 0.04*(1:125)
supp_included <- supp_aug_includes <- matrix(0, 125, 6)
df
i=64
j=4
ret <- ocd_CI(p=100, s=df$s[j], z=1000, vartheta=2, signal_shape=df$signal_shape[j], spatial='identity', beta=2,
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=d1_all[i], alpha=0.05, print_type='muted')
supp <- ret$support
supp_aug <- ret$support_aug
supp
supp_aug
S <- support(p=100, s=df$s[j], vartheta=2, beta=2, signal_shape=df$signal_shape[j])
S
supp_included <- supp_aug_includes <- matrix(0, 125, 6)
0:0.008:1
seq(0.008,1,by=0.008)
supp_included[,1] <- supp_included[,2] <- supp_included[,3] <- supp_included[,4] <- supp_included[,5] <- supp_included[,6] <- seq(0.008,1,by=0.008)
supp_included
supp_aug_includes[, 1] <- 0.8
supp_aug_includes[, 2] <- 0.7
supp_aug_includes[, 3] <- 0.6
supp_aug_includes[, 4] <- 0.5
supp_aug_includes[, 5] <- 0.4
supp_aug_includes[, 6] <- 0,3
supp_aug_includes[, 6] <- 0.3
par(mfrow=c(1, 2), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
# Color mixing
mix_color <- function(color1, color2, lambda=0.5){
R1 <- strtoi(paste0('0x', substr(color1, 2, 3)))
G1 <- strtoi(paste0('0x', substr(color1, 4, 5)))
B1 <- strtoi(paste0('0x', substr(color1, 6, 7)))
R2 <- strtoi(paste0('0x', substr(color2, 2, 3)))
G2 <- strtoi(paste0('0x', substr(color2, 4, 5)))
B2 <- strtoi(paste0('0x', substr(color2, 6, 7)))
R <- round(R1 * (1-lambda) + R2 * lambda, 0)
G <- round(G1 * (1-lambda) + G2 * lambda, 0)
B <- round(B1 * (1-lambda) + B2 * lambda, 0)
return(rgb(R, G, B, maxColorValue = 255))
}
par(mfrow=c(1, 2), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(1-supp_included[, 1], supp_aug_includes[, 1], type ='l', col = palet[1],
xlab = '1-belong', ylab = 'contain', lwd = 2)
lines(1-supp_included[, 2], supp_aug_includes[, 2], lty = 2, col = palet[1], lwd = 2)
lines(1-supp_included[, 3], supp_aug_includes[, 3], col = palet[2], lwd = 2)
lines(1-supp_included[, 4], supp_aug_includes[, 4], lty = 2, col = palet[2], lwd = 2)
lines(1-supp_included[, 5], supp_aug_includes[, 5], col = palet[3], lwd = 2)
supp_aug_includes[, 1] <- 0.98
supp_aug_includes[, 2] <- 0.9
supp_aug_includes[, 3] <- 0.85
supp_aug_includes[, 4] <- 0.8
supp_aug_includes[, 5] <- 0.76
supp_aug_includes[, 6] <- 0.7
par(mfrow=c(1, 2), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(1-supp_included[, 1], supp_aug_includes[, 1], type ='l', col = palet[1],
xlab = '1-belong', ylab = 'contain', lwd = 2)
lines(1-supp_included[, 2], supp_aug_includes[, 2], lty = 2, col = palet[1], lwd = 2)
lines(1-supp_included[, 3], supp_aug_includes[, 3], col = palet[2], lwd = 2)
lines(1-supp_included[, 4], supp_aug_includes[, 4], lty = 2, col = palet[2], lwd = 2)
lines(1-supp_included[, 5], supp_aug_includes[, 5], col = palet[3], lwd = 2)
lines(1-supp_included[, 6], supp_aug_includes[, 6], lty = 2, col = palet[3], lwd = 2)
abline(v = 0.05, lty = 3, lwd = 2)
# sqrt(2*log(p)) = 3.03, closet to d1_all[64]; sqrt(2*log(p/alpha)) = 3.89, closest to d1_all[86]
points(1-supp_included[64, 1], supp_aug_includes[64, 1], pch = 19, col = palet[1], cex = 1.1)
points(1-supp_included[86, 1], supp_aug_includes[86, 1], pch = 17, col = palet[1], cex = 1.1)
points(1-supp_included[64, 2], supp_aug_includes[64, 2], pch = 19, col = palet[1], cex = 1.1)
points(1-supp_included[86, 2], supp_aug_includes[86, 2], pch = 17, col = palet[1], cex = 1.1)
points(1-supp_included[64, 3], supp_aug_includes[64, 3], pch = 19, col = palet[2], cex = 1.1)
points(1-supp_included[86, 3], supp_aug_includes[86, 3], pch = 17, col = palet[2], cex = 1.1)
points(1-supp_included[64, 4], supp_aug_includes[64, 4], pch = 19, col = palet[2], cex = 1.1)
points(1-supp_included[86, 4], supp_aug_includes[86, 4], pch = 17, col = palet[2], cex = 1.1)
points(1-supp_included[64, 5], supp_aug_includes[64, 5], pch = 19, col = palet[3], cex = 1.1)
points(1-supp_included[86, 5], supp_aug_includes[86, 5], pch = 17, col = palet[3], cex = 1.1)
points(1-supp_included[64, 6], supp_aug_includes[64, 6], pch = 19, col = palet[3], cex = 1.1)
points(1-supp_included[86, 6], supp_aug_includes[86, 6], pch = 17, col = palet[3], cex = 1.1)
legend.col = c(palet[1],  palet[2], palet[3], 'black', 'black')
legend.lty = c(1,1,1,1,2)
legend.txt = c('uniform', 'inverse sqrt', 'harmonic', 's=5', 's=50')
legend('right', legend=legend.txt, lty=legend.lty, col=legend.col, lwd=2, cex=0.7, pt.cex=1.1)
dev.off()
0.8/0.005
# Generate Figure 1 left panel
niter <- 500
df <- data.frame(p=c(100,100,100,500,500,500), s=c(2,10,100,2,22,500))
df
# Generate Figure 1 left panel
niter <- 500
df <- data.frame(p=c(100,100,100,500,500,500), s=c(2,10,100,2,22,500))
d1_coef <- seq(0, 0.795, by=0.005)
cov <- matrix(0, 160, 6)
df
j=2
d1_all <- d1_coef * sqrt(log(df$p[j]/0.05))
d1_all
i=60
niter = 2
ret <- ocd_CI(p=df$p[j], s=df$s[j], z=1000, vartheta=1, signal_shape='random', spatial='identity', beta=1,
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=d1_all[i], alpha=0.05, print_type='muted')
ret
par(mfrow=c(1, 1), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(1-supp_included[, 1], supp_aug_includes[, 1], type ='l', col = palet[1],
xlab = '1-belong', ylab = 'contain', lwd = 2)
lines(1-supp_included[, 2], supp_aug_includes[, 2], lty = 2, col = palet[1], lwd = 2)
lines(1-supp_included[, 3], supp_aug_includes[, 3], col = palet[2], lwd = 2)
lines(1-supp_included[, 4], supp_aug_includes[, 4], lty = 2, col = palet[2], lwd = 2)
lines(1-supp_included[, 5], supp_aug_includes[, 5], col = palet[3], lwd = 2)
lines(1-supp_included[, 6], supp_aug_includes[, 6], lty = 2, col = palet[3], lwd = 2)
abline(v = 0.05, lty = 3, lwd = 2)
# sqrt(2*log(p)) = 3.03, closet to d1_all[64]; sqrt(2*log(p/alpha)) = 3.89, closest to d1_all[86]
points(1-supp_included[64, 1], supp_aug_includes[64, 1], pch = 19, col = palet[1], cex = 1.1)
points(1-supp_included[86, 1], supp_aug_includes[86, 1], pch = 17, col = palet[1], cex = 1.1)
points(1-supp_included[64, 2], supp_aug_includes[64, 2], pch = 19, col = palet[1], cex = 1.1)
points(1-supp_included[86, 2], supp_aug_includes[86, 2], pch = 17, col = palet[1], cex = 1.1)
points(1-supp_included[64, 3], supp_aug_includes[64, 3], pch = 19, col = palet[2], cex = 1.1)
points(1-supp_included[86, 3], supp_aug_includes[86, 3], pch = 17, col = palet[2], cex = 1.1)
points(1-supp_included[64, 4], supp_aug_includes[64, 4], pch = 19, col = palet[2], cex = 1.1)
points(1-supp_included[86, 4], supp_aug_includes[86, 4], pch = 17, col = palet[2], cex = 1.1)
points(1-supp_included[64, 5], supp_aug_includes[64, 5], pch = 19, col = palet[3], cex = 1.1)
points(1-supp_included[86, 5], supp_aug_includes[86, 5], pch = 17, col = palet[3], cex = 1.1)
points(1-supp_included[64, 6], supp_aug_includes[64, 6], pch = 19, col = palet[3], cex = 1.1)
points(1-supp_included[86, 6], supp_aug_includes[86, 6], pch = 17, col = palet[3], cex = 1.1)
legend.col = c(palet[1],  palet[2], palet[3], 'black', 'black')
legend.lty = c(1,1,1,1,2)
legend.txt = c('uniform', 'inverse sqrt', 'harmonic', 's=5', 's=50')
legend('right', legend=legend.txt, lty=legend.lty, col=legend.col, lwd=2, cex=0.7, pt.cex=1.1)
dev.off()
par(mfrow=c(1, 1), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(1-supp_included[, 1], supp_aug_includes[, 1], type ='l', col = palet[1],
xlab = '1-belong', ylab = 'contain', lwd = 2)
df
cov <- matrix(0, 160, 6)
cov[,1] <- 0.98
cov[,2] <- 0.92
cov[,3] <- 0.87
cov[,4] <- 0.8
cov[,5] <- 0.75
cov[,6] <- 0.7
par(mfrow=c(1, 1), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(d1_coef, cov[, 1], type='l', col=palet[1], xlab='tuning parameter c', ylab='Coverage probability', lwd=2)
lines(d1_coef, cov[, 2], lty=2, col=palet[1], lwd=2)
lines(d1_coef, cov[, 3], lty=3, col=palet[1], lwd=2)
lines(d1_coef, cov[, 4], lty=1, col=palet[2], lwd=2)
lines(d1_coef, cov[, 5], lty=2, col=palet[2], lwd=2)
lines(d1_coef, cov[, 6], lty=3, col=palet[2], lwd=2)
abline(h=0.95, lty=3, lwd=2)
legend.col = c(palet[1],  palet[2], 'black', 'black', 'black')
legend.lty = c(1,1,1,2,3)
legend.txt = c('p=100', 'p=500', 's=2', 's=sqrt(p)', 's=p')
legend('bottomright', legend=legend.txt, lty=legend.lty, col=legend.col, lwd=2, cex=0.7, pt.cex=1.1)
dev.off()
# Generate Figure 1 right panel
niter <- 500
df <- data.frame(vartheta=rep(c(2,1,0.5), each=c(3,3,3)), beta=c(8,2,0.5,4,1,0.25,2,0.5,0.125))
?replications
?rep
df <- data.frame(vartheta=rep(c(2,1,0.5), c(3,3,3)), beta=c(8,2,0.5,4,1,0.25,2,0.5,0.125))
df
d1_coef <- seq(0, 0.795, by=0.005)
d1_all <- d1_coef * sqrt(log(100/0.05))
cov <- matrix(0, 160, 9)
j=2
i=1
i=60
niter <- 2
temp_cov <- rep(0, niter)
for (iter in 1:niter){
ret <- ocd_CI(p=100, s=10, z=1000, vartheta=df$vartheta[j], signal_shape='random', spatial='identity', beta=df$beta[j],
ocd_thresholds='MC', l_choice='zero', d1_choice='other', d1=d1_all[i], alpha=0.05, print_type='muted')
temp_cov[iter] <- ifelse(ret$CI[1] <= 1000 & ret$CI[2] >= 1000, 1, 0)
}
cov[i, j] <- mean(temp_cov)
cov
cov[6-,2]
cov[60,2]
cov <- matrix(0, 160, 9)
cov[,1] <- 0.98
cov[,2] <- 0.93
cov[,3] <- 0.88
cov[,4] <- 0.83
cov[,5] <- 0.78
cov[,6] <- 0.73
cov[,7] <- 0.68
cov[,8] <- 0.64
cov[,9] <- 0.6
par(mfrow=c(1, 1), mar=c(2.5, 2.5, 0.7, 0.7), mgp=c(1.5,0.5,0), tcl=-0.2)
palet <- matplotlib_palette(10)
plot(d1_coef, cov[, 1], type='l', col=palet[1], xlab='tuning parameter c', ylab='Coverage probability', lwd=2)
lines(d1_coef, cov[, 2], lty=2, col=palet[1], lwd=2)
lines(d1_coef, cov[, 3], lty=3, col=palet[1], lwd=2)
lines(d1_coef, cov[, 4], lty=1, col=palet[2], lwd=2)
lines(d1_coef, cov[, 5], lty=2, col=palet[2], lwd=2)
lines(d1_coef, cov[, 6], lty=3, col=palet[2], lwd=2)
lines(d1_coef, cov[, 7], lty=1, col=palet[3], lwd=2)
lines(d1_coef, cov[, 8], lty=2, col=palet[3], lwd=2)
lines(d1_coef, cov[, 9], lty=3, col=palet[3], lwd=2)
abline(h=0.95, lty=3, lwd=1)
legend.col = c(palet[1],  palet[2], palet[3], 'black', 'black', 'black')
legend.lty = c(1,1,1,1,2,3)
legend.txt = c('vartheta=2', 'vartheta=1', 'vartheta=0.5', 'beta=vartheta', 'beta=4*vartheta', 'beta=vartheta/4')
legend('bottomright', legend=legend.txt, lty=legend.lty, col=legend.col, lwd=2, cex=0.7, pt.cex=1.1)
# test example for each table
# Table 1
ocd_CI(p=100, s=10, vartheta=1, signal_shape='random', spatial='identity', beta=1,
ocd_thresholds='MC', l_choice='zero', d1_choice='default', alpha=0.05, kaul_comp = TRUE,
print_type ='both')
# This R file demonstrates how the ocd_CI algorithm can be applied to a dataset of
# weekly deaths number in the United States between January 2017 and June 2020.
# See Section 4.4 of the accompanied paper.
source('ocd_CI.R')
# process US weekly deaths data
# get the day numbers in a year for any given week
getDays <- function(end_date){
days <- as.numeric(strftime(end_date, format = "%j"))
days <- seq(-6, 0) + rep(days, each=7)
days[days <= 0] <- days[days <= 0] + 365
return(matrix(days, nrow=7))
}
# 1. estimate the average number of deaths on each day of the yearfrom these derived daily
#    death numbers using a Gaussian kernel with a bandwidth of 20 days
# 2. apply a square-root transformation to stabilise the variance
# 3. weekly excess deaths are computed on a square-root scale
process_state <- function(state, last_training_date='2019-06-30'){
state_deaths <- US_deaths[US_deaths$region_code==state,
c('end_date', 'total_deaths')]
state_deaths$end_date <- as.Date(state_deaths$end_date)
state_deaths_train <- state_deaths[state_deaths$end_date <= last_training_date, ]
deaths <- rep(state_deaths_train$total_deaths / 7, each=7)
days <- getDays(state_deaths_train$end_date)
mean_deaths <- aggregate(deaths ~ as.vector(days), FUN=mean)
bw <- 20
dist <- outer(1:365, 1:365,
function(i,j){pmin(abs(i - j), i + 365 - j, j + 365 - i)})
wt <- exp(-dist^2/(2*bw^2))
wt <- wt / rowSums(wt)
smooth_deaths <- wt %*% mean_deaths$deaths
days <- getDays(state_deaths$end_date)
sqrt_total_deaths <- sqrt(state_deaths$total_deaths) - sqrt(colSums(matrix(smooth_deaths[days], nrow=7)))
ave <- mean(sqrt_total_deaths[state_deaths$end_date <= last_training_date])
std <- sd(sqrt_total_deaths[state_deaths$end_date <= last_training_date])
sqrt_total_deaths <- (sqrt_total_deaths - ave) / std
return(sqrt_total_deaths)
}
# read data
US_deaths <- read.csv('./US_weekly_deaths.csv')
# use data up to the end of 2020
df <- data.frame(end_date=unique(US_deaths$end_date)[1:207])
# use data up to 2019-06-30 as training, rest as monitoring
last_training_date='2019-06-30'
# process the data in each state
for (state in unique(US_deaths$region_code)){
df[[state]] <- process_state(state)[1:207]
}
df$end_date = as.Date(as.character(df$end_date))
rownames(df) = df$end_date
# construct testing data
first_test_week <- which(df$end_date>last_training_date)[1]
df_test = df[first_test_week:207, 2:52]
#---------------------------------------------------------------
# ocd_CI to be applied to the testing dataset
# problem parameters
p <- ncol(df_test); beta <- 50; gamma <- 1000
# ocd parameters
T_diag <- log(16*p*gamma*log2(4*p)); T_off <- 8*log(16*p*gamma*log2(2*p))
# # ocd_CI parameters (with l = 0)
alpha <- 0.05;
d1 <- 1/2*sqrt(log(p/alpha)); d2 <- d1^2 * 4
# initiliase
n <- 0
bunch(A, tail) %=% initialise(p)
# monitoring for changepoint
repeat{
n <- n + 1
x <- as.numeric(df_test[n,])
bunch(stat, A, tail) %=% process_new_obs(x, A, tail, beta)
if (stat['diag'] > T_diag || stat['off'] > T_off) break
}
N <- n  # time of declaration
println('Declaration on week ending: ', rownames(df_test)[N])
# compute anchor tail length and anchor coordinate
bunch(anchor_tail_length, anchor_coord) %=% find_anchor(A, tail, beta)
# compute support estimate
bunch(S_hat, b_tilde) %=% support_estimate(A, tail, anchor_coord, anchor_tail_length, beta, d1)
println('Estimated support of the change states: ', paste(colnames(df_test)[S_hat], collapse = ', '))
# compute confidence interval
CI <- conf_int(N, tail, S_hat, b_tilde, beta, d2)
CI_dates <- c(as.Date(rownames(df_test)[CI[1]-1])+1, as.Date(rownames(df_test)[CI[2]]))
println('Confidence interval: [', paste(CI_dates, collapse=', '), ']')
# Generate Figure 3 in Section 4.4 of the accompanied paper
par(mfrow=c(1, 1), mar=c(3, 1.5, 0.2, 0.2), mgp=c(1.5,0.5,0), tcl=-0.03)
plot(c(as.Date(df$end_date[1])-6, as.Date(df$end_date[181])), c(0, 56), pch=' ', xlab='', ylab='',
xaxt = 'n', yaxt = 'n', xaxs = 'i', yaxs='i', frame.plot=F)
polygon(c(as.Date('2020-03-15'), as.Date('2020-03-15'), as.Date('2020-03-28'), as.Date('2020-03-28')),
c(-3, 59, 59, -3), col = "#00FFFF")
plot_states = c('FL', 'NC', 'TX', 'WY', 'CA', 'WA', 'DC', 'LA', 'MI', 'CT', 'NY', 'NJ')
for (j in 1:12){
y <- df[1:181, c(plot_states[j])]
y <- 12*(y - max(df[1:181,2:52])) / diff(range(df[1:181,2:52])) + 10 + 4*j
if (j %in% 8:12){
lines(df$end_date[1:181], y, col = 'red')
}
else {
lines(df$end_date[1:181], y)
}
}
axis.Date(1, at=c(as.Date("2017/01/14"), seq(as.Date('2017/03/01'), as.Date('2020/01/01'), by="2 mon"),
as.Date('2020/03/15'), as.Date('2020/03/28'), as.Date('2020/05/01'),
as.Date('2020/06/27')), format="%Y-%m-%d", las = 2, cex.axis = 0.5, tck = -0.03)
axis(2, at = seq(2.7, 46.92, by = 4.02), labels = plot_states, las = 2, cex.axis = 0.7, tck = 0, lwd = 0)
abline(v=df$end_date[first_test_week]-6, lty = 2)
abline(v=as.Date('2020-03-15'), col = "#00FFFF")
abline(v=as.Date('2020-03-28'), col = "#00FFFF")
sessionInfo()
